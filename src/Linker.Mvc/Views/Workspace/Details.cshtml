@using Microsoft.AspNetCore.Http
@using Linker.Mvc.Models
@using System.Security.Claims
@model WorkspaceDetailsViewModel
@inject IHttpContextAccessor httpContextAccessor
@{
    ViewData["Title"] = "Workspace details";
    var memberCount = Model.Members.Count();
    var httpContext = httpContextAccessor.HttpContext;
    var isLoggedIn = httpContext?.User.Identity?.IsAuthenticated ?? false;
    var userId = httpContext?.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
    var isWorkspaceOwner = Model.WorkspaceOwnerId.Equals(userId, StringComparison.OrdinalIgnoreCase);
}

<partial name="_Notification" />

<div class="grid grid-cols-5 mb-10 gap-4">
    <div class="col-span-1 border border-solid border-black p-4">
        <div class="mb-4 flex justify-between items-center">
            <div>
                <i class="bi bi-people-fill"></i> Members (@memberCount)
            </div>
            <div>
                <button
                    onclick="openInviteUserDialog()"
                    title="Add members"
                    class="px-4 py-2 bg-black text-white rounded"
                >
                    <i class="bi bi-person-plus-fill"></i> Invite
                </button>
            </div>
        </div>
        <ul class="">
            @for (var i = 0; i < memberCount; i++)
            {
                var member = Model.Members.ElementAt(i);
                var isNotSelf = !member.Id.Equals(userId, StringComparison.OrdinalIgnoreCase);

                <li class="flex justify-between mb-2 items-center">
                    <div class="flex gap-2 items-center">
                        <div class="rounded-full overflow-hidden w-[30px] h-[30px]">
                            <img width="30" height="30" src="@member.PhotoUrl" alt="@member.Username's Profile image" />
                        </div>
                        <div>
                            <span>@member.Username</span>
                            <span class="text-sm text-gray-600">@member.Email</span>
                        </div>
                    </div>
                    @if (isWorkspaceOwner && isNotSelf)
                    {
                        <form method="post" asp-action="Kick" onsubmit="return confirm('Are you sure to kick this people?')">
                            <input hidden name="workspaceId" value="@Model.WorkspaceId" />
                            <input hidden name="userId" value="@member.Id" />
                            <button
                                class="block border border-solid border-black rounded px-1 text-sm"
                                type="submit"
                            >
                                Kick
                            </button>
                        </form>
                    }
                </li>
            }
        </ul>
    </div>
    <article class="col-span-3" id="@Html.DisplayFor(model => model.WorkspaceId)">
        <header class="mb-2">
            <p class="uppercase tracking-wide font-bold text-sm text-gray-300">
                @@@Html.DisplayFor(model => model.WorkspaceHandle)
            </p>

            <h1 class="text-2xl font-bold block">
                @Html.DisplayFor(model => model.WorkspaceName)
            </h1>
        </header>
        <div class="flex gap-4 items-center">
            <div><i class="bi bi-people-fill"></i> @memberCount</div>
            <div><span class="text-xs text-gray-500">Created by</span> @Model.WorkspaceOwnerUsername</div>
        </div>
        <div class="mb-10">
            <p class="text-gray-700">@Html.DisplayFor(model => model.WorkspaceDescription)</p>
        </div>

        <section class="flex flex-col gap-4 mb-5">
            <div>
                <div
                    class="flex gap-4 items-center"
                >
                    <p class="text-xl font-bold block">Collections</p>
                    @if (isWorkspaceOwner)
                    {
                        <button
                            class="block border border-solid border-black rounded"
                            onclick="openLinkDialog()"
                        >
                            Add link
                        </button>
                    }
                </div>
                @if (Model.Links.Any())
                {
                    <ul>
                        @foreach (var (link, index) in Model.Links.Select((a, i) => (a, i)))
                        {
                            <li class="flex gap-4 mb-1">
                                <a
                                    href="@link.Url"
                                    target="_blank"
                                    class="block"
                                >
                                    @(index + 1). @link.Name <i class="bi bi-box-arrow-up-right"></i>
                                </a>
                                <a
                                    asp-action="Details"
                                    asp-controller="Link"
                                    asp-route-id="@link.Id"
                                    class="block border border-solid border-black rounded px-1 text-sm"
                                >
                                    Details
                                </a>
                                @if (isWorkspaceOwner)
                                {
                                    <a
                                        class="block border border-solid border-black rounded px-1 text-sm"
                                        asp-action="RemoveLink"
                                        asp-route-workspaceId="@Model.WorkspaceId"
                                        asp-route-articleId="@link.Id"
                                        onclick="return confirm('Are you sure to remove from workspace?')"
                                    >
                                        Delete
                                    </a>
                                }
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="italic">There are no links in the workspace.</p>
                }
            </div>
        </section>
    </article>
    <aside class="col-span-1">
        <div class="w-[300px] border border-solid border-black">
            <div class="border-b border-solid border-black p-4 flex justify-between">
                <div>Chat</div>
                <div><i class="bi bi-0-circle-fill"></i></div>
            </div>
            <div id="chatcontainer">
                @foreach (var message in Model.ChatMessages)
                {
                    var username = Model.Members.FirstOrDefault(
                        x => x.Id.Equals(message.AuthorId, StringComparison.OrdinalIgnoreCase))?.Username ?? "Unknown";
                    <article class="border-b border-solid border-black p-2 bg-gray-50">
                        <p class="text-xs">@username - @message.CreatedAt</p>
                        <p>@message.Message</p>
                    </article>
                }
            </div>
            <form class="mt-auto" onsubmit="return captureMessage(event)">
                <input
                    class="p-2 outline-none border-none w-full"
                    name="chatmessage"
                    id="chatmessage"
                    placeholder="Type messages..."
                />
            </form>
        </div>
    </aside>
</div>

<div>
    @if(Model.WorkspaceOwnerId.Equals(userId, StringComparison.OrdinalIgnoreCase))
    {
        <span>
            @Html.ActionLink("Edit", "Edit", new { id = Model.WorkspaceId }) |
        </span>
    }
    <a class="px-4 py-2 bg-black text-white rounded" asp-action="Index">Back to List</a>
</div>

<dialog
    id="addw-link-popup"
    class="bg-white border-solid border border-black rounded p-5 w-[500px] shadow-lg fixed inset-1/2 transform -translate-x-1/2 -translate-y-1/2"
></dialog>

<dialog
    id="addw-user-popup"
    class="bg-white border-solid border border-black rounded p-5 w-[500px] shadow-lg fixed inset-1/2 transform -translate-x-1/2 -translate-y-1/2"
></dialog>

@section Scripts {
    <partial name="_SomeScriptsPartial" />
    <script type="text/javascript" async>
        var connection = new signalR
            .HubConnectionBuilder()
            .withUrl("https://localhost:7201/Chat")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.on("JoinSpecificChatRoom", (usr, msg) => {
            console.log(msg);
        });

        connection.on("ReceiveMessage", (usr, msg) => {
            var now = new Date();
            var newChatElem = document.createElement("article");
            newChatElem.className = "border-b border-solid border-black p-2 bg-gray-50";
            newChatElem.innerHTML = `
                <p class="text-xs">${usr} - ${now.getHours()}:${now.getMinutes()}</p>
                <p>${msg.message}</p>
            `;
            console.log(`${usr} - ${JSON.stringify(msg)}`);
            $("#chatcontainer").append(newChatElem);
        });

        connection.start().then(() => {
            connection.invoke("JoinSpecificChatRoom", {
                username: "@User.FindFirstValue(ClaimTypes.Name)",
                roomId: "@Model.WorkspaceId",
            })
                .then(() => console.log("Done connect"));
        });
    </script>
    <script type="text/javascript">
        function toggleLinkDialog() {
            $("dialog#addw-link-popup").toggle();
        }

        function toggleInviteUserDialog() {
            $("dialog#addw-user-popup").toggle();
        }

        function openInviteUserDialog() {
            var url = "@Url.Action("InviteUser", "Workspace", new { WorkspaceId = Model.WorkspaceId })";
            $("dialog#addw-user-popup").toggle().load(url);
        }

        function openLinkDialog() {
            var url = "@Url.Action("AddLink", "Workspace", new { WorkspaceId = Model.WorkspaceId })";
            $("dialog#addw-link-popup").toggle().load(url);
        }

        function captureMessage(event) {
            event.preventDefault();
            var formData = new FormData(event.target);
            $("input#chatmessage").val("");

            try {
                var message = [...formData.entries()][0][1];
                connection.invoke("SendMessage", {
                    content: message,
                    authorId: "@userId",
                    workspaceId: "@Model.WorkspaceId",
                });
            }
            catch (ex) {
                console.error(ex);
            }
        }
    </script>
}
